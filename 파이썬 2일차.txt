2. 리스트 슬라이싱
리스트의 집합을 다시 묶을때 사용할수 있는 기법이다.
a = [1,2,3,4,5]
a[0:2] : 0 -> 처음 시작하는 인덱스 2 -> 2개(길이)

3. 중첩된 리스트에서 슬라이싱 하기
a = [1,2,3,['a','b','c'],4,5]
a[2:5] --> 3,['a','b','c'],4
['a','b'] : 출력될수있게 만들어보자
1. 1차원 리스트의 인덱스를 찾기
2. 2차원 리스트를 슬라이싱해서 출력하기
a[3][:2] -> 'a','b'
 
4.리스트 연산하기
리스트 사이에서 (합집합:+) 리스트를 합친다
a = [1,2,3]
b = [4,5,6]
a+b = [1,2,3,4,5,6]

5. 리스트 반복하기(*)
리스트의 값들을 곱하기만큼 더한다.
a = [1,2,3]
a * 3 -> [1,2,3,1,2,3,1,2,3]

6. 리스트 길이 구하기
리스트의 전체값들을 카운트로 출력할수있다.
a = [1,2,3]
len(a) -> 3

7. 리스트는 값을 수정하거나 삭제할수 있다.
a = [1,2,3] : 리스트(배여ㅐㄹ) -> 첫번째시작은0부터
a[2] = 4
2) 리스트 삭제
a = [1,2,3]
del a[1] : 키워드로 삭제가능
3) 리스트 추가(함수 = append)
a = [1,2,3]
a.append -> [1,2,3,4]

4) 리스트 정렬 (오름차순 / 내림차순)
오름차순(sort) : 작은 값부터 순서대로 정렬된다.
내림차순 : 큰 값부터 순서대로 정렬된다.
a = [1,4,3,2,10,8,9,7,5]
a.sort() -> [1, 2, 3, 4, 5, 7, 8, 9, 10]

5)리스트 뒤집기 -reverse
a.reverse() ->[10, 9, 8, 7, 5, 4, 3, 2, 1]

8. 인덱스 변환 -> index
index(x = 값) 함수는 리스트에 x값이 있으면 x의 인덱스값(위치값) 리턴한다.
a = [1,2,3] -> a.index(3) -> 2(위치값)

9. 리스트 요소 추가 -index(끼어들기)
a = [4,1,2,3]
a.insert(시작위치,요소의 값) -> a.insert(0,4)

1. insert 함수를 이용해서 [4,1,5,2,3]
2. 리스트의 정렬되지않는 값들을 오름차순으로 만든다.
3. a = [1,2,3,4,5] -> 3의값과 5의 값을 삭제하자

10. 리스트 요소 제거 - remove
remove(x) : 첫번째로 나오는 x를 삭제한다.
a = [1,2,3,1,2,3]
a.remove(3) -> [1,2,1,2,3]

11. 리스트 요소 끄집어내기 - pop
pop()은 리스트의 맨 마지막 요소값을 삭제한다.
a = [4,5,6]
a.pop() -> [4,5]

12. 리스트 포함된 요서x의 개수세기 -> count
a = [1,2,3,1]
a.count(1) : 2
== 1이 몇개가 있나

13. 리스트 확장(extend) : 묶음단위로 추가
extend(x:리스트) : 리스트만 들어올수있다.
원래의 a 리스트 x리스트를 더하게 된다.
a = [1,2,3]
a.extends([4,5]) ->[1,2,3,4,5]
문제 : 10의 값까지 확장해서 한번에 더해보자.
a.extend([6,7,8,9,10])

@튜플 자료형 : 집합으로 값을 묶을때 활용
1. 리스트는 [ ] / 튜플은 ( )
2.리스트는 요소값 생성 삭제/수정 -> 변경 불가능
3. 값을 한번에 묶음으로 정의하거나
 인덱스(첨자 : 인덱스) 값을 위치에 맞게 출력한다.

1) 튜플 정의하기
t1 = (1,2,'a','b') -> t1[0] : 리스트와 같이 형식을 사용해야 값을 알수있다.

2) 튜플 슬라이싱하기
t1 = (1,2,'a','b')
t1[1:] -> (2,'a','b')

3) 튜플 더하기(+)
t1 = (1,2,'a','b')
t2 = (3,4)
t1 + t2 = (1,2,'a','b',3,4)

4) 튜플 곱사기(*)
t2 = (3,4)
t3 = t2*3 -> (3,4,3,4,3,4)

5) 튜플 길이 구하기
t1 = (1,2,'a','b')
len(t1) -> 4

문제 : (1,2,3)이라는 튜플에 4를 추가해서
(1,2,3,4)라는 새로운 튜플을 출력해보자.
1. 변수를 정의해서 튜플을 담자.
2. 변수의 값에 새로운 튜플을 더한다. 
a = (1,2,3)
a
(1, 2, 3)
a + (4,)
(1, 2, 3, 4)

@딕셔너리 (키값 = 요소값)
key와 value 라는 한쌍으로 만들수있는 자료형
{key1:value1,key2:value2}
사람정보)
이름/번호/생년월일
person = {name:'key',phone:010-9999-1234,birth:010203}
person['name'] -> key
person['phone'] -> 010-9999-1234
person['birth'] -> 010203

딕셔너리 키값 그룹화 : a.keys()
딕셔너리 값 그룹화 : a.values()

#주의사항
1. 키값(코드)를 중복처리하지 않게 해야한다.
마지막 하나를 제외한 나머지 것들이 모두
무시되고 최근에 값만 저장된다.
2. 하나의 코드값만 담을수 있다.

문제 : 딕셔너리 값 추출하기
딕셔너리 a에서 'B'에 해당하는 값을 추출하기
a = {'A':90,'B':80,'C':70}
b = a.pop('B')
print(b) -> 80 / a = {'A':90,'C':70}


@집합 자료형
교집합 / 합집합 / 차집합
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])
1. 교집합(s1 & s2) : 서로 중복되는 값들이 출력
2. 합집합(s1| s2) : 중복된값은 하나로 묶이고
전체의 값이 출력된다. = s1.union(s2)
3. 차집합(s2 - s1) : 첫번째 빼는 기준으로 두번째 비교하는 기준에서 
없는 값이 출력된다.
4. 집합 자료형 관련함수
1) 값1개 추가(add)
s1 = set([1,2,3])
s1.add(4) -> [1,2,3,4]
2) 여러요소값을 추가 (update)
s1 = set([1,2,3])
s1.update([4,5,6]) -> [1,2,3,4,5,6]
3) remove(x=요소값) 사용해서 삭제가능

@자료형의 값을 저장하는 공간 '변수'
(변수_이름 = 변수에_저장할값)
변수는 객체를 가리킨다라고 정의하거나
자료형의 데이터(값) 같은것을 의미한다.
a = [1,2,3] 메모리에 생성되고 저장된 주소를 가르킨다.
a = [1,2,3] / b = a 같은 메모리 사용
a is b --> true : 같은 메모리 주소값을 확인

#copy 모듈을 사용한다.
from copy import copy
a = [1,2,3]
b = copy(a)
id(a) -> 1602441254208
id(b) -> 1602434463744

#변수를 만드는 여러가지 방법
1) a,b = ('python','life')
a = 'python' / b = 'life'
2) a = b = 'python' : 두변수를 정의하고 중복되는 값을 정의할수 있다.
a = 'python' / b = 'python'

a = [1,2,3]
b = [1,2,3]
a is b -> 출력되는 값 = false
각각 따로 정의해서 false가 나온다

문제 : 리스트에서 중복 제거(set)하기
a = [1,1,1,2,2,3,3,3,4,4,5]
1. a 리스트를 중복을 제거한 
집합 자료형으로 변환 : (set)
2. 집합자료형( { } )을 리스트( [ ] ) 자료형으로 변환
3. 출력된 결과 -> [1,2,3,4,5]








